{"version":3,"sources":["Utils/windowDimensions.js","ToolBar/ToolBar.js","Sorting/mergeSort.js","Sorting/quickSort.js","Sorting/heapSort.js","Sorting/shellSort.js","Sorting/bitonicSort.js","SortingVisualizer/SortingVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","ToolBar","getArray","mergeSort","quickSort","heapSort","shellSort","bitonicSort","size","changeSize","setSpeed","sizeToSpeeds","MAX_SIZE","Math","floor","isRunning","speeds","setSpeeds","speedLabel","setSpeedLabel","sortAlgorithms","levelToSpeed","0","1","2","React","newSpeeds","toLowerCase","id","map","algorithm","idx","className","onClick","name","type","min","max","step","defaultValue","disabled","onChange","e","newSize","target","value","parseInt","level","label","newSpeed","mergeSortHelp","arr","left","right","aux","animations","statistics","length","comparisons","mid","merge","k","i","j","push","accesses","getMergeSortAnimations","slice","quickSortHelp","pivot","partition","pivIdx","piv","action","bars","heights","comparison","getQuickSortAnimations","heapifyDown","endIdx","bar","leftIdx","rightIdx","larger","getHeapSortAnimations","gaps","gap","insertionSort","val","last","getShellSortAnimations","bitonicSortHelp","start","n","dir","m","maxPowerTwoLessThan","getBitonicSortAnimations","SortingVisualizer","CONTAINER_HEIGHT_PERCENT","MAX_HEIGHT","AQUA","RED","MAROON","array","setArray","setSize","speed","barWidth","setBarWidth","barRefs","useRef","newArray","getRandomIntFromRange","current","Array","resetStatistics","document","getElementById","innerHTML","random","resetArray","setStatistics","curStats","arrayBars","console","log","leftBarIdx","rightBarIdx","leftBarStyle","style","rightBarStyle","color","setTimeout","backgroundColor","barIdx","newHeight","barStyle","pivStyle","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","barOneNewHeight","barTwoNewHeight","parentIdx","parentStyle","barNewIdx","barNewHeight","barHeight","sizeToBarWidth","slope","slow","normal","fast","ref","el","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.210dc606.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n};\n\nconst useWindowDimensions = () => {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowDimensions(getWindowDimensions());\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n};\n\nexport default useWindowDimensions;\n","import React, { useState } from \"react\";\nimport \"./ToolBar.css\";\nimport useWindowDimensions from \"./../Utils/windowDimensions.js\";\n\nconst ToolBar = ({\n  getArray,\n  mergeSort,\n  quickSort,\n  heapSort,\n  shellSort,\n  bitonicSort,\n  size,\n  changeSize,\n  setSpeed,\n  sizeToSpeeds,\n}) => {\n  const { width } = useWindowDimensions();\n\n  // min size of array\n  const MIN_SIZE = 20;\n  // maximum size of array based on screen width\n  const MAX_SIZE = 0.2 * width > 20 ? Math.floor(0.2 * width) : 60;\n  //step for range input controlling array size\n  const STEP = 10;\n\n  // this keeps track of whether an algorithm is being run. If something\n  // is running, then the user can't run another algorithm, reset the array\n  // or change the array size during this\n  // wasn't able to implement this\n  const [isRunning, setIsRunning] = useState(false);\n  // the state of the sorting speed based on the current array size\n  const [speeds, setSpeeds] = useState({});\n  // the name of the speed that the user will see\n  const [speedLabel, setSpeedLabel] = useState(\"Normal\");\n  const sortAlgorithms = [\n    mergeSort,\n    quickSort,\n    heapSort,\n    shellSort,\n    bitonicSort,\n  ];\n  // maps a number to a speed string\n  const levelToSpeed = { 0: \"Fast\", 1: \"Normal\", 2: \"Slow\" };\n\n  // the number of levels of speed minus 1\n  const N = 2;\n\n  React.useEffect(() => {\n    // get the new sorting speeds based on the new size\n    const newSpeeds = sizeToSpeeds(size);\n    // set new speeds to be current possible sorting speeds\n    setSpeeds(newSpeeds);\n    // set current speed of the sorting algorithm based on new speeds\n    setSpeed(newSpeeds[speedLabel.toLowerCase()]);\n  }, [size, setSpeeds, setSpeed, sizeToSpeeds, speedLabel]);\n\n  // handles size change from range input\n  const handleSizeChange = (e) => {\n    const newSize = e.target.value;\n    changeSize(parseInt(newSize));\n  };\n\n  const handleSpeedChange = (e) => {\n    // range input for speed goes from 0 - 2\n    // normally 2 is the fastest, but within the code, the lower numbers\n    // mean a faster speed\n    //N - <level> to get actual level from range\n    const level = N - e.target.value;\n    //get the speed label name that user sees\n    const label = levelToSpeed[level];\n    setSpeedLabel(label);\n    //to lowercase b/c the property names are lower case of the label name\n    // Ex: Fast -> fast\n    const newSpeed = speeds[label.toLowerCase()];\n    // set the new speed that the user moved the range input to\n    setSpeed(newSpeed);\n  };\n\n  return (\n    <nav id=\"tool-bar\">\n      {sortAlgorithms.map((algorithm, idx) => (\n        <button\n          className=\"sort-button\"\n          onClick={!isRunning ? algorithm : null}\n          key={`sort-algorithm-${idx}`}\n        >\n          {algorithm.name}\n        </button>\n      ))}\n      <div id=\"get-array-container\">\n        <button\n          id=\"get-array\"\n          onClick={\n            !isRunning\n              ? () => {\n                  getArray(size);\n                }\n              : null\n          }\n        >\n          New Array\n        </button>\n      </div>\n      <div id=\"size-range-container\">\n        <div id=\"size-range-title\">Size</div>\n        <input\n          id=\"change-size\"\n          type=\"range\"\n          min={`${MIN_SIZE}`}\n          max={`${MAX_SIZE}`}\n          step={`${STEP}`}\n          defaultValue=\"150\"\n          disabled={isRunning ? \"disabled\" : null}\n          onChange={handleSizeChange}\n        />\n        <div id=\"array-size\">{size}</div>\n      </div>\n\n      <div id=\"speed-range-container\">\n        <div id=\"speed-range-title\">Speed</div>\n        <input\n          id=\"change-speed\"\n          type=\"range\"\n          min=\"0\"\n          max=\"2\"\n          step=\"1\"\n          defaultValue=\"1\"\n          disabled={isRunning ? \"disabled\" : null}\n          onChange={handleSpeedChange}\n        />\n        <div id=\"speed-label\">{speedLabel}</div>\n      </div>\n    </nav>\n  );\n};\n\nexport default ToolBar;\n","const getMergeSortAnimations = (arr) => {\n  const animations = [];\n  const statistics = [{ comparisons: 0, accesses: 0 }];\n  //every 3 animations determines a sequence of color, uncolor and height change\n  //the first one has the indices of the elements being compared\n  //the bars at these 2 indices should be some off color\n  //the second one has the indices of the elements just compared\n  //the bars at these 2 indices should revert back to the normal color\n  //the third one has the height change at an index for a combined hill\n  if (arr.length <= 1) {\n    statistics[0].comparisons += 1;\n    return { animations, statistics };\n  }\n  statistics[0].comparisons += 1;\n  const aux = arr.slice();\n  mergeSortHelp(arr, 0, arr.length - 1, aux, animations, statistics);\n  return { animations, statistics };\n};\n\nconst mergeSortHelp = (arr, left, right, aux, animations, statistics) => {\n  if (left === right) return;\n  statistics[statistics.length - 1].comparisons += 1;\n  const mid = Math.floor((left + right) / 2);\n  //get the hills on the left and right\n  mergeSortHelp(aux, left, mid, arr, animations, statistics);\n  mergeSortHelp(aux, mid + 1, right, arr, animations, statistics);\n\n  //merge the hills into one hill\n  merge(arr, left, mid, right, aux, animations, statistics);\n};\n\nconst merge = (arr, left, mid, right, aux, animations, statistics) => {\n  //pointer for array\n  let k = left;\n  //pointer for left hill in aux\n  let i = left;\n  // pointer for rigt hill in aux\n  let j = mid + 1;\n  while (i <= mid && j <= right) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    // These are the number of comaprisons and array accesses at this frame\n\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n\n    if (aux[i] <= aux[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, aux[i]]);\n\n      const { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({\n        comparisons: comparisons + 1,\n        accesses: accesses + 4,\n      });\n\n      arr[k] = aux[i];\n      k++;\n      i++;\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, aux[j]]);\n\n      const { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({\n        comparisons: comparisons + 1,\n        accesses: accesses + 2,\n      });\n\n      arr[k] = aux[j];\n      k++;\n      j++;\n    }\n  }\n  //after this loop, one of the hills is fully added\n\n  //if left hill is not added to arr completely\n  while (i <= mid) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, aux[i]]);\n\n    // These are the number of comaprisons and array accesses at this frame\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n\n    arr[k] = aux[i];\n    k++;\n    i++;\n  }\n  //if right hill is not added to arr completely\n  while (j <= right) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, aux[j]]);\n\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n\n    arr[k] = aux[j];\n    k++;\n    j++;\n  }\n};\n\nexport default getMergeSortAnimations;\n","const getQuickSortAnimations = (arr) => {\n  const animations = [];\n  const statistics = [{ comparisons: 0, accesses: 0 }];\n  if (arr.length <= 1) {\n    statistics[0].comparisons += 1;\n    return { animations, statistics };\n  }\n  statistics[0].comparisons += 1;\n  // const newArr = arr.slice().sort((a, b) => a - b);\n  quickSortHelp(arr, 0, arr.length - 1, animations, statistics);\n  // for (let i = 0; i < arr.length; i++) {\n  //   if (arr[i] !== newArr[i]) {\n  //     console.log(false);\n  //     console.log(arr);\n  //     console.log(newArr);\n  //     break;\n  //   }\n  // }\n  // console.log(true);\n  return { animations, statistics };\n};\n\nconst quickSortHelp = (arr, left, right, animations, statistics) => {\n  if (left >= right) {\n    statistics[statistics.length - 1].comparisons += 1;\n    return;\n  }\n  statistics[statistics.length - 1].comparisons += 1;\n  let pivot = partition(arr, left, right, animations, statistics);\n  statistics[statistics.length - 1].comparisons += 1;\n  quickSortHelp(arr, left, pivot - (pivot === right), animations, statistics);\n  quickSortHelp(arr, pivot + 1, right, animations, statistics);\n};\n\nconst partition = (arr, left, right, animations, statistics) => {\n  const mid = Math.floor((left + right) / 2);\n  let pivIdx = mid;\n  const piv = arr[pivIdx];\n  animations.push({ type: \"pivot\", action: \"start\", idx: pivIdx });\n\n  const { comparisons, accesses } = statistics[statistics.length - 1];\n  statistics.push({ comparisons: comparisons, accesses: accesses + 1 });\n\n  let i = left;\n  let j = right;\n  while (i < pivIdx && j > pivIdx) {\n    animations.push({ type: \"compare\", action: \"start\", bars: [i, j] });\n    animations.push({ type: \"compare\", action: \"end\", bars: [i, j] });\n\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n\n    if (arr[i] > piv && arr[j] < piv) {\n      animations.push({\n        type: \"swap\",\n        bars: [i, j],\n        heights: [arr[j], arr[i]],\n      });\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n\n      const { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons + 2, accesses: accesses + 4 });\n\n      i += 1;\n      j -= 1;\n    } else if (arr[i] <= piv) {\n      statistics[statistics.length - 1].comparison += 3;\n      statistics[statistics.length - 1].accesses += 3;\n      i += 1;\n    } else {\n      statistics[statistics.length - 1].comparison += 3;\n      statistics[statistics.length - 1].accesses += 3;\n      j -= 1;\n    }\n  }\n  statistics[statistics.length - 1].comparison += 2;\n  if (j === mid) {\n    statistics[statistics.length - 1].comparisons += 1;\n    let idx = i;\n    for (let k = i; k < mid; k++) {\n      animations.push({ type: \"compare\", action: \"start\", bars: [k, k] });\n      animations.push({ type: \"compare\", action: \"end\", bars: [k, k] });\n\n      const { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons, accesses: accesses });\n      statistics.push({ comparisons: comparisons, accesses: accesses });\n\n      if (arr[k] <= piv) {\n        animations.push({\n          type: \"swap\",\n          bars: [k, idx],\n          heights: [arr[idx], arr[k]],\n        });\n        [arr[k], arr[idx]] = [arr[idx], arr[k]];\n\n        const { comparisons, accesses } = statistics[statistics.length - 1];\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 3,\n        });\n\n        idx += 1;\n      }\n    }\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n\n    animations.push({\n      type: \"swap\",\n      bars: [idx, mid],\n      heights: [arr[mid], arr[idx]],\n    });\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n\n    animations.push({ type: \"pivot\", action: \"end\", idx: pivIdx });\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n\n    [arr[idx], arr[mid]] = [arr[mid], arr[idx]];\n\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n\n    pivIdx = idx;\n    animations.push({ type: \"pivot\", action: \"start\", idx: pivIdx });\n  } else {\n    let idx = j;\n    statistics[statistics.length - 1].comparisons += 1;\n    for (let k = j; k > mid; k--) {\n      animations.push({ type: \"compare\", action: \"start\", bars: [k, k] });\n      animations.push({ type: \"compare\", action: \"end\", bars: [k, k] });\n\n      const { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons, accesses: accesses });\n      statistics.push({ comparisons: comparisons, accesses: accesses });\n\n      if (arr[k] >= piv) {\n        animations.push({\n          type: \"swap\",\n          bars: [k, idx],\n          heights: [arr[idx], arr[k]],\n        });\n        [arr[k], arr[idx]] = [arr[idx], arr[k]];\n\n        const { comparisons, accesses } = statistics[statistics.length - 1];\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 3,\n        });\n\n        idx -= 1;\n      }\n    }\n\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n\n    animations.push({\n      type: \"swap\",\n      bars: [idx, mid],\n      heights: [arr[mid], arr[idx]],\n    });\n\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n\n    animations.push({ type: \"pivot\", action: \"end\", idx: pivIdx });\n\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n\n    [arr[idx], arr[mid]] = [arr[mid], arr[idx]];\n\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n\n    pivIdx = idx;\n    animations.push({ type: \"pivot\", action: \"start\", idx: pivIdx });\n  }\n  animations.push({ type: \"pivot\", action: \"end\", idx: pivIdx });\n\n  statistics.push({\n    comparisons: statistics[statistics.length - 1].comparisons,\n    accesses: statistics[statistics.length - 1].accesses,\n  });\n\n  return pivIdx;\n};\n\nexport default getQuickSortAnimations;\n","const getHeapSortAnimations = (arr) => {\n  const animations = [];\n  const statistics = [{ comparisons: 0, accesses: 0 }];\n  if (arr.length <= 1) {\n    statistics[0].comparisons += 1;\n    return { animations, statistics };\n  }\n  statistics[0].comparisons += 1;\n  // const newArr = arr.slice().sort((a, b) => a - b);\n  heapSort(arr, animations, statistics);\n  // for (let i = 0; i < arr.length; i++) {\n  //   if (arr[i] !== newArr[i]) {\n  //     console.log(false, i);\n  //     console.log(arr);\n  //     console.log(newArr);\n  //     break;\n  //   }\n  // }\n  // console.log(true);\n  return { animations, statistics };\n};\n\nconst heapSort = (arr, animations, statistics) => {\n  const start = Math.floor(arr.length / 2);\n  for (let i = start; i >= 0; i--) {\n    heapifyDown(arr, i, arr.length - 1, animations, statistics);\n  }\n  //the tree should be a max heap\n  for (let i = arr.length - 1; i > 0; i--) {\n    //move cur max to the back\n    //cur max is at index 0\n    animations.push({ type: \"swap\", bars: [0, i], heights: [arr[i], arr[0]] });\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n    statistics.push({ comparisons: comparisons, accesses: accesses + 2 });\n\n    //heapify down on root\n    heapifyDown(arr, 0, i - 1, animations, statistics);\n  }\n};\n\n// const heapifyUp = (arr, idx, animations) => {\n//   while (idx !== 0) {\n//     const parentIdx = Math.floor((idx - 1) / 2);\n//     if (arr[idx] > arr[parentIdx]) {\n//       //swap\n//       [arr[parentIdx], arr[idx]] = [arr[idx], arr[parentIdx]];\n//       idx = parentIdx;\n//     } else {\n//       return;\n//     }\n//   }\n// };\n\nconst heapifyDown = (arr, idx, endIdx, animations, statistics) => {\n  while (idx <= endIdx) {\n    const { comparisons, accesses } = statistics[statistics.length - 1];\n    statistics.push({ comparisons: comparisons, accesses: accesses });\n    animations.push({ type: \"parent\", action: \"start\", bar: idx });\n    const leftIdx = 2 * idx + 1;\n    const rightIdx = 2 * idx + 2;\n\n    if (leftIdx > endIdx && rightIdx > endIdx) {\n      animations.push({ type: \"parent\", action: \"end\", bar: idx });\n      const { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons, accesses: accesses });\n      return;\n    } else if (leftIdx <= endIdx && rightIdx <= endIdx) {\n      const larger = arr[leftIdx] >= arr[rightIdx] ? leftIdx : rightIdx;\n      animations.push({\n        type: \"compare\",\n        action: \"start\",\n        bars: [leftIdx, rightIdx],\n      });\n      animations.push({\n        type: \"compare\",\n        action: \"end\",\n        bars: [leftIdx, rightIdx],\n      });\n      let { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons + 3, accesses: accesses + 2 });\n      statistics.push({ comparisons: comparisons + 3, accesses: accesses + 2 });\n\n      ({ comparisons, accesses } = statistics[statistics.length - 1]);\n      if (arr[larger] > arr[idx]) {\n        animations.push({\n          type: \"swap\",\n          bars: [idx, larger],\n          heights: [arr[larger], arr[idx]],\n        });\n        [arr[idx], arr[larger]] = [arr[larger], arr[idx]];\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 4,\n        });\n        animations.push({ type: \"parent\", action: \"end\", bar: idx });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 4,\n        });\n        idx = larger;\n      } else {\n        animations.push({ type: \"parent\", action: \"end\", bar: idx });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 1,\n        });\n        return;\n      }\n    } else if (leftIdx <= endIdx) {\n      animations.push({\n        type: \"compare\",\n        action: \"start\",\n        bars: [leftIdx, leftIdx],\n      });\n      animations.push({\n        type: \"compare\",\n        action: \"end\",\n        bars: [leftIdx, leftIdx],\n      });\n\n      let { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons + 3, accesses: accesses });\n      statistics.push({ comparisons: comparisons + 3, accesses: accesses });\n\n      ({ comparisons, accesses } = statistics[statistics.length - 1]);\n      if (arr[leftIdx] > arr[idx]) {\n        animations.push({\n          type: \"swap\",\n          bars: [idx, leftIdx],\n          heights: [arr[leftIdx], arr[idx]],\n        });\n        [arr[idx], arr[leftIdx]] = [arr[leftIdx], arr[idx]];\n        animations.push({ type: \"parent\", action: \"end\", bar: idx });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 4,\n        });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 4,\n        });\n        idx = leftIdx;\n      } else {\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 2,\n        });\n        animations.push({ type: \"parent\", action: \"end\", bar: idx });\n        return;\n      }\n    } else {\n      animations.push({\n        type: \"compare\",\n        action: \"start\",\n        bars: [rightIdx, rightIdx],\n      });\n      animations.push({\n        type: \"compare\",\n        action: \"end\",\n        bars: [rightIdx, rightIdx],\n      });\n      let { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons + 3, accesses: accesses });\n      statistics.push({ comparisons: comparisons + 3, accesses: accesses });\n      ({ comparisons, accesses } = statistics[statistics.length - 1]);\n      if (arr[rightIdx] > arr[idx]) {\n        animations.push({\n          type: \"swap\",\n          bars: [idx, rightIdx],\n          heights: [arr[rightIdx], arr[idx]],\n        });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 4,\n        });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 4,\n        });\n\n        [arr[idx], arr[rightIdx]] = [arr[rightIdx], arr[idx]];\n        animations.push({ type: \"parent\", action: \"end\", bar: idx });\n        idx = rightIdx;\n      } else {\n        animations.push({ type: \"parent\", action: \"end\", bar: idx });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 2,\n        });\n        return;\n      }\n    }\n  }\n};\n\nexport default getHeapSortAnimations;\n","const getShellSortAnimations = (arr) => {\n  const animations = [];\n  const statistics = [{ comparisons: 0, accesses: 0 }];\n  if (arr.length <= 1) {\n    statistics[0].comparisons += 1;\n    return { animations, statistics };\n  }\n  statistics[0].comparisons += 1;\n  // const newArr = arr.slice().sort((a, b) => a - b);\n  shellSort(arr, animations, statistics);\n  // for (let i = 0; i < arr.length; i++) {\n  //   if (arr[i] !== newArr[i]) {\n  //     console.log(false);\n  //     console.log(arr);\n  //     console.log(newArr);\n  //     break;\n  //   }\n  // }\n  // console.log(true);\n  return { animations, statistics };\n};\n\nconst shellSort = (arr, animations, statistics) => {\n  const gaps = [];\n  for (let k = 0; k < arr.length; k++) {\n    if (2 ** k + 1 < arr.length) {\n      statistics[statistics.length - 1].comparisons += 1;\n      gaps.push(2 ** k + 1);\n    } else {\n      break;\n    }\n  }\n\n  for (let j = gaps.length - 1; j >= 1; j--) {\n    const gap = gaps[j];\n    for (let i = 0; i <= arr.length - gap - 1; i++) {\n      let { comparisons, accesses } = statistics[statistics.length - 1];\n\n      animations.push({\n        type: \"compare\",\n        action: \"start\",\n        bars: [i, i + gap],\n      });\n      statistics.push({ comparisons: comparisons + 1, accesses: accesses });\n      if (arr[i] > arr[i + gap]) {\n        animations.push({\n          type: \"swap\",\n          bars: [i, i + gap],\n          heights: [arr[i + gap], arr[i]],\n        });\n        [arr[i], arr[i + gap]] = [arr[i + gap], arr[i]];\n\n        ({ comparisons, accesses } = statistics[statistics.length - 1]);\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 4,\n        });\n      }\n      animations.push({\n        type: \"compare\",\n        action: \"end\",\n        bars: [i, i + gap],\n      });\n      ({ comparisons, accesses } = statistics[statistics.length - 1]);\n      statistics.push({\n        comparisons: comparisons,\n        accesses: accesses,\n      });\n    }\n  }\n  insertionSort(arr, animations, statistics);\n  //last gap of 1 -> insertion sort\n};\n\nconst insertionSort = (arr, animations, statistics) => {\n  for (let i = 1; i < arr.length; i++) {\n    const val = arr[i];\n    statistics[statistics.length - 1].accesses += 1;\n    let last = i - 1;\n    let { comparisons, accesses } = statistics[statistics.length - 1];\n    for (let k = i - 1; k >= 0; k--) {\n      animations.push({ type: \"check\", action: \"start\", bar: k });\n      statistics.push({ comparisons: comparisons, accesses: accesses });\n      if (arr[k] > val) {\n        animations.push({ type: \"shift\", bar: k, height: arr[k] });\n        animations.push({ type: \"check\", action: \"end\", bar: k });\n        arr[k + 1] = arr[k];\n\n        ({ comparisons, accesses } = statistics[statistics.length - 1]);\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 3,\n        });\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 3,\n        });\n        last -= 1;\n      } else {\n        animations.push({ type: \"check\", action: \"end\", bar: k });\n        ({ comparisons, accesses } = statistics[statistics.length - 1]);\n        statistics.push({\n          comparisons: comparisons + 1,\n          accesses: accesses + 1,\n        });\n        break;\n      }\n    }\n    animations.push({ type: \"insert\", bar: last + 1, height: val });\n    arr[last + 1] = val;\n    ({ comparisons, accesses } = statistics[statistics.length - 1]);\n    statistics.push({\n      comparisons: comparisons,\n      accesses: accesses + 1,\n    });\n  }\n};\n\nexport default getShellSortAnimations;\n","const getBitonicSortAnimations = (arr) => {\n  const animations = [];\n  const statistics = [{ comparisons: 0, accesses: 0 }];\n  if (arr.length <= 1) {\n    statistics[0].comparisons += 1;\n    return { animations, statistics };\n  }\n  //   const newArr = arr.slice().sort((a, b) => a - b);\n  bitonicSort(arr, animations, statistics);\n  //   for (let i = 0; i < arr.length; i++) {\n  //     if (arr[i] != newArr[i]) {\n  //       console.log(false);\n  //       console.log(arr);\n  //       console.log(newArr);\n  //     }\n  //   }\n  //   console.log(true);\n  return { animations, statistics };\n};\n\nconst bitonicSort = (arr, animations, statistics) => {\n  // true for ascending, false for descending\n  bitonicSortHelp(arr, 0, arr.length, true, animations, statistics);\n};\n\nconst bitonicSortHelp = (arr, start, n, dir, animations, statistics) => {\n  if (n > 1) {\n    const m = Math.floor(n / 2);\n    bitonicSortHelp(arr, start, m, !dir, animations, statistics);\n    bitonicSortHelp(arr, start + m, n - m, dir, animations, statistics);\n    merge(arr, start, n, dir, animations, statistics);\n  }\n};\n\nconst merge = (arr, start, n, dir, animations, statistics) => {\n  if (n > 1) {\n    const m = maxPowerTwoLessThan(n);\n    for (let i = start; i < start + n - m; i++) {\n      animations.push({ type: \"compare\", action: \"start\", bars: [i, i + m] });\n\n      let { comparisons, accesses } = statistics[statistics.length - 1];\n      statistics.push({ comparisons: comparisons, accesses: accesses });\n\n      if (dir === arr[i] > arr[i + m]) {\n        //direction is the same as inversion direction\n        animations.push({\n          type: \"swap\",\n          bars: [i, i + m],\n          heights: [arr[i + m], arr[i]],\n        });\n        [arr[i], arr[i + m]] = [arr[i + m], arr[i]];\n\n        ({ comparisons, accesses } = statistics[statistics.length - 1]);\n        statistics.push({\n          comparisons: comparisons + 2,\n          accesses: accesses + 4,\n        });\n      }\n      animations.push({ type: \"compare\", action: \"end\", bars: [i, i + m] });\n      ({ comparisons, accesses } = statistics[statistics.length - 1]);\n      statistics.push({\n        comparisons: comparisons,\n        accesses: accesses,\n      });\n    }\n    merge(arr, start, m, dir, animations, statistics);\n    merge(arr, start + m, n - m, dir, animations, statistics);\n  }\n  statistics[statistics.length - 1].comparisons += 1;\n};\n\nconst maxPowerTwoLessThan = (n) => {\n  let k = 1;\n  while (k > 0 && k < n) {\n    k = k << 1;\n  }\n  //right shift b/c after loop, k is larger than n\n  return k >>> 1;\n};\n\nexport default getBitonicSortAnimations;\n","import React, { useState, useRef } from \"react\";\nimport \"./SortingVisualizer.css\";\nimport ToolBar from \"./../ToolBar/ToolBar.js\";\nimport useWindowDimensions from \"./../Utils/windowDimensions.js\";\nimport getMergeSortAnimations from \"./../Sorting/mergeSort.js\";\nimport getQuickSortAnimations from \"./../Sorting/quickSort.js\";\nimport getHeapSortAnimations from \"./../Sorting/heapSort.js\";\nimport getShellSortAnimations from \"./../Sorting/shellSort.js\";\nimport getBitonicSortAnimations from \"./../Sorting/bitonicSort.js\";\n\nconst SortingVisualizer = () => {\n  const { height } = useWindowDimensions();\n\n  // the height of the container for the array bars in percent\n  const CONTAINER_HEIGHT_PERCENT = 100 - 7000 / height;\n\n  // minimum height of a bar in px\n  const MIN_HEIGHT = 5;\n  // maximum height of a bar in px based on screen height\n  const MAX_HEIGHT = (CONTAINER_HEIGHT_PERCENT / 100) * height - 10;\n\n  const AQUA = \"#00FFFF\";\n  const RED = \"#cc0000\";\n  const MAROON = \"#800000\";\n\n  // array of numbers that user sees as bars\n  const [array, setArray] = useState([]);\n  // size of the array\n  const [size, setSize] = useState(150);\n  // sorting speed\n  const [speed, setSpeed] = useState(6);\n  // the width of a bar on the screen in percent\n  const [barWidth, setBarWidth] = useState(0.3466666);\n\n  // reference to the bars that will be animated\n  const barRefs = useRef([]);\n\n  React.useEffect(() => {\n    // get new array of requested size\n    const newArray = [];\n    for (let i = 0; i < size; i++) {\n      newArray.push(getRandomIntFromRange(MIN_HEIGHT, MAX_HEIGHT));\n    }\n    setArray(newArray);\n    // new reference to the bars of the array that will be animated\n    barRefs.current = new Array(size);\n    // reset the number of comparisons and array accesses to 0\n    resetStatistics();\n  }, [size, MIN_HEIGHT, MAX_HEIGHT]);\n\n  const resetStatistics = () => {\n    // hacky and bad way to reset current number of comparisons and\n    // accesses\n\n    // wanted to use state, but since both numbers change while\n    // the array sort is being animated (loop), the set states are\n    // mashed together and the numbers wouldn't update properly\n    document.getElementById(\"comparisons\").innerHTML = \"Comparisons: 0\";\n    document.getElementById(\"array-accesses\").innerHTML = \"Array accesses: 0\";\n  };\n\n  const changeSize = (n) => {\n    const sizeToBarWidth = (n) => {\n      // formula for bar width based on array size\n      return 55 / n;\n    };\n    setSize(n);\n    resetArray(n);\n    //change bar width\n    const barWidth = sizeToBarWidth(n);\n    setBarWidth(barWidth);\n  };\n\n  const sizeToSpeeds = () => {\n    //3 levels for speed\n    //slow, normal, fast\n    //scale speeds depending on size\n    //slow: 2, normal: 1, fast: 0\n\n    //slope is the speed for fast\n    // const slope = -(28 / 230) * size + 7460 / 230;\n    const slope = 500 / size;\n    const speed = (level) => {\n      return slope * level + slope;\n    };\n    return { slow: speed(2), normal: speed(1), fast: speed(0) };\n  };\n\n  const getRandomIntFromRange = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const resetArray = (n) => {\n    const newArray = [];\n    for (let i = 0; i < n; i++) {\n      newArray.push(getRandomIntFromRange(MIN_HEIGHT, MAX_HEIGHT));\n    }\n    setArray(newArray);\n    resetStatistics();\n  };\n\n  const setStatistics = (curStats) => {\n    // hacky and bad way to set current number of comparisons and\n    // accesses\n\n    // wanted to use state, but since both numbers change while\n    // the array sort is being animated (loop), the set states are\n    // mashed together and the numbers wouldn't update properly\n    const { comparisons, accesses } = curStats;\n    document.getElementById(\n      \"comparisons\"\n    ).innerHTML = `Comparisons: ${comparisons}`;\n    document.getElementById(\n      \"array-accesses\"\n    ).innerHTML = `Array accesses: ${accesses}`;\n  };\n\n  // the animations for all the sorting algorithms at each step are\n  // kept in an array that is returned from the actual sort\n  // there is a corresponding array of the number of comparisons/array\n  // accesses at each step\n\n  // Using, the array of animations at each step of the sort, we animate\n  // the array at each step of the sort and similarly for the number of\n  // comparisons/array accesses\n\n  // the animation at index i correspondings the the number of\n  // comparisons/array accesses so far in the sort at index i\n\n  const mergeSort = () => {\n    const { animations, statistics } = getMergeSortAnimations(array.slice());\n    const arrayBars = barRefs.current;\n    for (let i = 0; i < animations.length; i++) {\n      console.log(arrayBars);\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        //we are comparing or just  done comparing\n        const [leftBarIdx, rightBarIdx] = animations[i];\n        const leftBarStyle = arrayBars[leftBarIdx].style;\n        const rightBarStyle = arrayBars[rightBarIdx].style;\n        const color = i % 3 === 0 ? RED : AQUA;\n        setTimeout(() => {\n          leftBarStyle.backgroundColor = color;\n          rightBarStyle.backgroundColor = color;\n\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else {\n        const [barIdx, newHeight] = animations[i];\n        const barStyle = arrayBars[barIdx].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      }\n    }\n  };\n\n  const quickSort = () => {\n    const { animations, statistics } = getQuickSortAnimations(array);\n    const arrayBars = barRefs.current;\n    for (let i = 0; i < animations.length; i++) {\n      const type = animations[i].type;\n      if (type === \"pivot\") {\n        const action = animations[i].action;\n        const color = action === \"start\" ? MAROON : AQUA;\n        const pivIdx = animations[i].idx;\n        const pivStyle = arrayBars[pivIdx].style;\n        setTimeout(() => {\n          pivStyle.backgroundColor = color;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else if (type === \"compare\") {\n        const action = animations[i].action;\n        const color = action === \"start\" ? RED : AQUA;\n        const [barOneIdx, barTwoIdx] = animations[i].bars;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else {\n        //swap\n        const [barOneIdx, barTwoIdx] = animations[i].bars;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const [barOneNewHeight, barTwoNewHeight] = animations[i].heights;\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      }\n    }\n  };\n\n  const heapSort = () => {\n    const { animations, statistics } = getHeapSortAnimations(array);\n    const arrayBars = barRefs.current;\n    for (let i = 0; i < animations.length; i++) {\n      const type = animations[i].type;\n      if (type === \"compare\") {\n        const action = animations[i].action;\n        const color = action === \"start\" ? RED : AQUA;\n        const [barOneIdx, barTwoIdx] = animations[i].bars;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else if (type === \"parent\") {\n        const action = animations[i].action;\n        const color = action === \"start\" ? MAROON : AQUA;\n        const parentIdx = animations[i].bar;\n        const parentStyle = arrayBars[parentIdx].style;\n        setTimeout(() => {\n          parentStyle.backgroundColor = color;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else {\n        //swap\n        const [barOneIdx, barTwoIdx] = animations[i].bars;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const [barOneNewHeight, barTwoNewHeight] = animations[i].heights;\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      }\n    }\n  };\n\n  const shellSort = () => {\n    const { animations, statistics } = getShellSortAnimations(array);\n    const arrayBars = barRefs.current;\n    for (let i = 0; i < animations.length; i++) {\n      const type = animations[i].type;\n      if (type === \"compare\") {\n        const action = animations[i].action;\n        const color = action === \"start\" ? RED : AQUA;\n        const [barOneIdx, barTwoIdx] = animations[i].bars;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else if (type === \"swap\") {\n        const [barOneIdx, barTwoIdx] = animations[i].bars;\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const [barOneNewHeight, barTwoNewHeight] = animations[i].heights;\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else if (type === \"check\") {\n        const action = animations[i].action;\n        const color = action === \"start\" ? RED : AQUA;\n        const barIdx = animations[i].bar;\n        const barStyle = arrayBars[barIdx].style;\n        setTimeout(() => {\n          barStyle.backgroundColor = color;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else if (type === \"shift\") {\n        const barNewIdx = animations[i].bar + 1;\n        const barNewHeight = animations[i].height;\n        const barStyle = arrayBars[barNewIdx].style;\n        setTimeout(() => {\n          barStyle.height = `${barNewHeight}px`;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else {\n        //insert\n        const barIdx = animations[i].bar;\n        const barHeight = animations[i].height;\n        const barStyle = arrayBars[barIdx].style;\n        setTimeout(() => {\n          barStyle.height = `${barHeight}px`;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      }\n    }\n  };\n\n  const bitonicSort = () => {\n    const { animations, statistics } = getBitonicSortAnimations(array);\n    const arrayBars = barRefs.current;\n    for (let i = 0; i < animations.length; i++) {\n      const type = animations[i].type;\n      const [barOneIdx, barTwoIdx] = animations[i].bars;\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      if (type === \"compare\") {\n        const action = animations[i].action;\n        const color = action === \"start\" ? RED : AQUA;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      } else {\n        const [barOneNewHeight, barTwoNewHeight] = animations[i].heights;\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n          setStatistics(statistics[i + 1]);\n        }, i * speed);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <ToolBar\n        getArray={resetArray}\n        mergeSort={mergeSort}\n        quickSort={quickSort}\n        heapSort={heapSort}\n        shellSort={shellSort}\n        bitonicSort={bitonicSort}\n        size={size}\n        changeSize={changeSize}\n        setSpeed={setSpeed}\n        sizeToSpeeds={sizeToSpeeds}\n      ></ToolBar>\n      <div id=\"statistics\">\n        <div id=\"comparisons\">Comparisons: 0</div>\n        <div id=\"array-accesses\">Array accesses: 0</div>\n      </div>\n      <div\n        className=\"array-container\"\n        style={{ height: `${CONTAINER_HEIGHT_PERCENT}%` }}\n      >\n        {array.map((val, idx) => (\n          <div\n            className=\"array-bar\"\n            style={{ height: `${val}px`, width: `${barWidth}%` }}\n            key={idx}\n            ref={(el) => (barRefs.current[idx] = el)}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer.js\";\nimport \"./App.css\";\n\nconst App = () => {\n  return <SortingVisualizer></SortingVisualizer>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}